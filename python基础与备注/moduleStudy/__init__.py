"""
模块与包的学习：

模块化优点：
    1：方便多人开发与维护
    2：模块复用

Python中一个py文件就是一个模块，要创建模块，实际就是建立一个python文件。模块名要符合标识符规范。

引入外部模块的几种方法：

    1：import 模块名

    2：import 模块名 as 模块别名
        import语句可以在任何位置调用，可以引入同一个模块多次，但是"模块实例"只会创建一次。
        在每一个模块内部都有一个"__name__"属性,通过这个属性可以获取模块的名字。主模块的”__name__“为”__main__“。
        在模块中定义的变量、函数、类，在引入模块之后，就可以采用模块名来使用(模块名.变量名|模块名.函数名|模块名.类名)。

    3：from 模块名 import 引入部分1,引入部分2：
        只引入模块中的特定部分。
        在模块中定义的变量、函数、类，在引入模块之后，就可以直接使用(变量名|函数名|类名)。

    4：from 模块名 import * :
        引入模块所有内容，不建议使用。因为按照引入模块的位置，有可能会覆盖当前文件在引入位置之前已经定义过的变量，方法和类。

    5：from 模块名 import 变量 as 变量别名
        此种方式可以有效解决方法4中名字覆盖的问题。

特别说明：
    1：模块中添加了”_“的变量，函数，类不可以被引入，只能在模块内部访问。
    2：模块中的测试代码应写入写入判断(if "__name__" == "__main__":)中，避免导入模块是被执行。

包：
    包也是一个模块，当一个模块的代码过多，需要被分解为多个模块时，就会使用到包。
    普通模块是一个py文件，而包是一个文件夹。
    包中必须有一个文件"__init__.py"文件，这个文件可以包含包中的主要内容，直接引入包就是引入这个文件。
    包中可以包含子模块，引入子模块方式：
        from 包 import 子模块1，子模块2：在引入子模块之后，就可以采用子模块名来使用(子模块名.变量名|子模块名.函数名|子模块名.类名)。
    __pycache__是模块的缓存文件，可以提高程序运行效率。

"""

# 该文件中定义的变量，函数，类，在引入包这个模块的时候，就可以直接使用。
a = 10
b = 20
